	#pragma hdrstop
	#pragma argsused

	#ifdef _WIN32
	#include <tchar.h>
	#else
	typedef char _TCHAR;
	#define _tmain main
	#endif

	#include <iostream>
	#include <stdio.h>
	#include <conio.h>
	#include <stdlib.h>
	#include <windows.h>
	#define MAX_LONG 90
	#define ARRIBA 72
	#define ABAJO 80
	#define ENTER 13
	#define M 5
	using namespace std;

	int Op;

	struct Nodo
	{
		int N;
		int Arreglo_Claves[M - 1];
		struct Nodo *P[M];
	}*Raiz = NULL;

	enum Estado_Clave {Duplicado,SearchFailure,Exacto,Insertado,LessKeys};

	void InsertarArbolB(int Clave);

	enum Estado_Clave ins(struct Nodo *T, int X, int* Y, struct Nodo** U);

	int  BuscarPosicion(int X,int *key_arr, int N);

	void ImprimirArbolB(struct Nodo *Raiz,int X);

	int BuscarPosicion(int Clave, int *key_arr, int N)
	{
		int Pos=0;

		while(Pos < N && Clave > key_arr[Pos])
		{
			Pos++;
		}
		return Pos;
	}

	enum Estado_Clave ins(struct Nodo *Ptr, int Clave, int *upKey, struct Nodo**Nuevo)
	{
		struct Nodo *newPtr, *lastPtr;
		int Pos;
		int i;
		int N;
		int splitPos;
		int Nueva_Clave;
		int Ultima_Clave;
		enum Estado_Clave Value;

		if(Ptr == NULL)
		{
			*Nuevo = NULL;
			*upKey = Clave;
			return Insertado;
		}

		N = Ptr -> N;
		Pos = BuscarPosicion(Clave, Ptr -> Arreglo_Claves, N);

		if(Pos < N && Clave == Ptr -> Arreglo_Claves[Pos])
		{
			return Duplicado;
		}

		Value = ins(Ptr -> P[Pos], Clave, &Nueva_Clave, &newPtr);

		if(Value != Insertado)
		{
			return Value;
		}

		if(N < M - 1)
		{
			Pos = BuscarPosicion(Nueva_Clave, Ptr -> Arreglo_Claves, N);

			for(i = N; i > Pos; i--)
			{
				Ptr -> Arreglo_Claves[i] = Ptr -> Arreglo_Claves[i - 1];
				Ptr -> P[i + 1] = Ptr -> P[i];
			}

			Ptr -> Arreglo_Claves[Pos] = Nueva_Clave;
			Ptr -> P[Pos + 1] = newPtr;
			++Ptr -> N;
			return Exacto;
		}

		if(Pos == M - 1)
		{
			Ultima_Clave = Nueva_Clave;
			lastPtr = newPtr;
		}
		else
		{
			Ultima_Clave = Ptr -> Arreglo_Claves[M - 2];
			lastPtr = Ptr -> P[M-1];
			for(i = M-2; i > Pos; i--)
			{
				Ptr -> Arreglo_Claves[i] = Ptr -> Arreglo_Claves[i - 1];
				Ptr -> P[i + 1] = Ptr -> P[i];
			}
			Ptr -> Arreglo_Claves[Pos] = Nueva_Clave;
			Ptr -> P[Pos + 1] = newPtr;
		}
		splitPos = (M - 1)/2;
		(*upKey) = Ptr -> Arreglo_Claves[splitPos];
		(*Nuevo) = new(struct Nodo);
		Ptr -> N = splitPos;
		(*Nuevo) -> N = M - 1 - splitPos;

		for(i = 0; i < (*Nuevo) -> N; i++)
		{
			(*Nuevo) -> P[i] = Ptr -> P[i + splitPos + 1];
			if(i < (*Nuevo) -> N - 1)
			{
				(*Nuevo) -> Arreglo_Claves[i] = Ptr -> Arreglo_Claves[i + splitPos + 1];
			}
			else
			{
				(*Nuevo) -> Arreglo_Claves[i] = Ultima_Clave;
            }
		}

		(*Nuevo)-> P[(*Nuevo) -> N] = lastPtr;
		return Insertado;
	}

	void InsertarArbolB(int Clave)
	{
		struct Nodo *Nuevo;
		int upKey;
		enum Estado_Clave Value;
		Value = ins(Raiz, Clave, &upKey, &Nuevo);

		if(Value == Duplicado)
		{
			printf("Valor Insertado Con Exito ..!\n");
		}

		if(Value == Insertado)
		{
			struct Nodo *UpRaiz = Raiz;
			Raiz = new(struct Nodo);
			Raiz -> N = 1;
			Raiz -> Arreglo_Claves[0] = upKey;
			Raiz -> P[0] = UpRaiz;
			Raiz -> P[1] = Nuevo;
		}
	}

	void MostrarArbolBPorNiveles(struct Nodo *Ptr, int Vacios)
	{
		if(Ptr)
		{
			int i;
			int Contador = 0;
			for(i = 1; i <= Vacios;i++)
			{
				printf("");
			}

			for(i = 0; i < Ptr -> N; i++)
			{
				printf("\t%d", Ptr -> Arreglo_Claves[i]);
			}

			printf("\n");

			printf("Nivel: " + Contador);

            Contador++;

			for(i = 0; i <= Ptr -> N; i++)
			{
				ImprimirArbolB(Ptr -> P[i], Vacios + 10);
			}

		}
	}

	void RecorrerArbolBDescendente(struct Nodo *Ptr)
	{
		if(Ptr)
		{
			int i;

			for(i = 0; i < Ptr -> N; i++)
			{
				cout<< Ptr -> Arreglo_Claves[i] << ", ";
			}

			for(i = 0; i <= Ptr -> N; i++)
			{
				RecorrerArbolB(Ptr -> P[i]);
			}

		}
	}

	void Menu()
	{
		system("cls");
        cout<< "\n" <<endl;
		cout<< "     Tarea: Recorridos Arbol B\n" <<endl;
		cout<< "          1. Insertar Clave\n" <<endl;
		cout<< "          2. Mostrar Arbol B\n" <<endl;
		cout<< "          3. Recorrer Arbol B\n" <<endl;
		cout<< "          4. Salir \n" <<endl;
		cout<< "          Ingrese Una Opcion: ";
		cin>> Op;
	}

	int _tmain(int argc, _TCHAR* argv[])
	{
		int Clave;
		int Band = 0;
		system("color 0b");
		system("cls");

		Menu();

		while(Op != 4)
		{
			switch(Op)
			{
				case 1:
                    Band = 1;
					printf("\n Ingrese Clave A Insertar: ");
					scanf("%d",&Clave);
					InsertarArbolB(Clave);
					printf("\n Clave Insertada Con Exito ..! ");
					printf("\n");
					system("pause > 0");
					Menu();
				break;

				case 2:
					if(Band == 1)
					{
						printf("\t\t\t El Arbol B Es : ");
						printf("\n");
						ImprimirArbolB(Raiz, 0);
					}
					else
					{
						printf("\t\t\t El Arbol B Esta Vacio");
					}
					system("pause > 0");
					Menu();
				break;

                case 3:
					if(Band == 1)
					{
						printf("\t\t\t El Recorrido es : ");
						printf("\n");
						RecorrerArbolB(Raiz);
					}
					else
					{
						printf("\t\t\t El Arbol B Esta Vacio");
					}
					system("pause > 0");
					Menu();
				break;

				default:
					Menu();
				break;
			}
			cout<<endl<<endl;
			system("cls");
		}

		system("cls");
		system("pause > 0");
		return 0;
	}
